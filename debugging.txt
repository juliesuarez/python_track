
A bug is a glitch in software that prevents a program from achieving the desired output.
HAT IS DEBUGGING?
def1:refers to the process of finding and fixing errors in your source code.

WHAT IS A BUG?
a bug is written code which doesnt give us the desired output.
a bug is a glitch in software that prevents a program from achieving the desired output.
a mistake that prevents the programmer from having the desired output/ prevents the program from being executed properly.

TYPES/CLASSIFICATION OF BUGS
1.Syntax errors(coding bugs); errors that violate the syntax rules 
e.g spelling errors, passing arguments where there are no arguments needed.
these occur during the build time. normally include misuse of functtions, variables,parameters.
these are normally underlined by the IDE(Intergrated Development Enviornment).

2.logical errors; these occur when steps taken to solve a problem are not well done.
 OR occur when the process of solving the task at hand is not well done.e.g an endless loop.
 the program works perfectly but it doesnt produce the expected results.

3.Design bug; an error introduced into the system during the design process,
 causing the program to do what it was programmed to do but not the right thing to do.

4.Runtime bugs/errors; these occur when the application tries to perform an operation that isn't allowed. 
and theyre only discovered st the point of running the script or program.
e.g when you divide any number by zero(0), any calculation with a string.
build-time errors,are the ones that come up as your writing the code
TESTING;
refers to trying to test the limit of your code. 

DEBUGGING CYCLES;
step1; coding.
step2; check if its working.
step3; this step is depandent on step2. if its not working we then DEBUG.
step4; if its working then you're done and go back to step1.


BUG SEEKING
step1: writing code/coding
step2: trying to break the code(testing)
step3: if you succeed in breaking it,then you need to debug
step4: if you fail to break it,then you are ok,then continue coding

PRINCIPLES OF DEBUGGING
1. Catch your bug as early as possible
bugs caught early are pretty easy to fix because the deals are still in your mind and know where you look.
Catch bugs early
only have one bug at a time
look on what you last changed if your trying to find a bug
always work in small chucks.avoid large chucks
always make small commits when using github
2.if a bug isnt caught it gets harder to find because the details are not in your mind

STEEPS OF DEBUGGING
1.plan your attack
2.backup your files(using version control to keep track of my changes)
3.isolate the block of code that has error like commenting it out
4.after finding the error,finding the actual line of code that has error
5.fix the error,dont patch it(make the code work)
6.test the fix you have just dictionaries
7.look for similar bugs

OTHER STEPS AND STRATEGIES
>Reproducibility,be able to reproduce it,understand the cause and effect
>Reduction,simplest test that exhibits the bug,bugs are caused by something,they are not random(bugs)
they come from somewhere in the code
>Deduction,observe what the program is doing,cant fix the bug if you dont know
what the bug is doing,know the difference betn the working input and non working input
>isolation
Prior programming,someone else may see the wrong assumptions made,
programming in tools,someone else can see the mistakes made.
>explain someone(programmer) to understand your code
helps u understand what your writing to do with your code
>experience from others,ask for help from experienced programmers

PREVENTIVE MEASURES TO AVOID 
1. write clean code and easy to read ie,indenting code and not repeating yourself(dry)
2.commenting ,figures out what your code is trying to solve with which parts of your code.
3.make one change at a time,dont make many changes at the same time.
4.test your code
  >unit test,test the function blocks of your code
  >integrated test,test how the blocks of code are interacting with themselves
  >the test with invalid data,testing if the data is valid
5.Defensive programming,by adding error checkingg code and throwing exceptions
6.priotizing features that can be omitted
7.incubating (sleeping)
8.brainstorming

DEBUGGING TOOLS
linting
break points,this helps you see which part of code is carrying a bug
#reseacrh use a bug tool of your choice 
